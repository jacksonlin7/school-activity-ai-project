import numpy
from sklearn import linear_model

X = numpy.array([[10,12,98],[12,10,32],[12,10,89],[10,13,30],[10,12,98],[12,10,32],[12,10,89],[10,13,30],[10,12,98],[12,10,32],[12,10,89],[10,13,30]]).reshape(12,3)
y = numpy.array([1,0,1,0,1,0,1,0,1,0,1,0])


print(X.shape)
print(y.shape)

print(X)

logr = linear_model.LogisticRegression()
logr.fit(X,y)

log_odds = logr.coef_ 
odds = numpy.exp(log_odds)

predicted = logr.predict(numpy.array([[10,11,32]]).reshape(1,3))
print(predicted)


def logit2prob(logr, X):
  log_odds = logr.coef_[0][0] * X[0] + logr.coef_[0][1] * X[1] + logr.coef_[0][2] * X[2] + logr.intercept_
  odds = numpy.exp(log_odds)
  probability = odds / (1 + odds)
  return(probability)
print("=====================================================")
print(logit2prob(logr, [10,11,32]))
print(logit2prob(logr, [10,12,98]))
print(logr.coef_)
print(logr.coef_[0][0])
print(logr.intercept_)

jk = 10*logr.coef_[0][0] + 11*logr.coef_[0][1] + 32*logr.coef_[0][2] + logr.intercept_
print(jk)
jk = 10*logr.coef_[0][0] + 12*logr.coef_[0][1] + 98*logr.coef_[0][2] + logr.intercept_
print(jk)
